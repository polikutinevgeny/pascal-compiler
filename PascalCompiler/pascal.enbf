<Program>                  ::= [ 'PROGRAM' <Ident> ';' ]
                               <Block> '.';

<Block>                    ::= [ <DeclSection> ]
                               <CompoundStmt>;

<DeclSection>              ::= ( <ConstSection>     |
                                 <TypeSection>      |
                                 <VarSection>       |
                                 <ProcedureDecl>    |
                                 <FunctionDecl>     )*;

<ConstSection>             ::= 'CONST' ( <ConstantDecl> ';' )+;

<ConstantDecl>             ::= <Ident> ( '=' <ConstExpr> | ':' <Type> '=' <TypedConstant> );

<TypeSection>              ::= 'TYPE' ( <TypeDecl> ';' )+;

<TypeDecl>                 ::= <Ident> '=' <Type>;

<TypedConstant>            ::= ( <ConstExpr> | <ArrayConstant> | <RecordConstant> );

<ArrayConstant>            ::= '(' 
                               ( <ConstExpr> [ ',' <ConstExpr> ]* )
                               ')';

<RecordConstant>           ::= '(' ( <RecordFieldConstant> [ ';' <RecordFieldConstant> ]* ) ')';

<RecordFieldConstant>      ::= <Ident> ':' <ConstExpr>;

<Type>                     ::= <TypeID>        |
                               <SimpleType>    |
                               <StrucType>;

<SimpleType>               ::= ( <OrdinalType> | <RealType> );

<RealType>                 ::= 'REAL';

<OrdinalType>              ::= 'INTEGER' | 'CHAR';

<Subrange>                 ::= <ConstExpr> '..' <ConstExpr>;

<StrucType>                ::= ( <ArrayType> | <RecType> );

<ArrayType>                ::= 'ARRAY' '[' <Subrange> [ ',' <Subrange> ]* ']' 'OF' <Type>;

<RecType>                  ::= 'RECORD'
                               <RecordFieldList>
                               'END';

<RecordFieldList>          ::= ( <FieldDecl> [ ';' <FieldDecl> ]* ) [';'];

<FieldDecl>                ::= <IdentList> ':' <Type>;

<VarSection>               ::= 'VAR' ( <VarDecl> ';' )+;

<VarDecl>                  ::= (<Ident> ':' <Type> [ '=' <TypedConst> ]) |
                               (<IdentList> ':' <Type>);

<Expression>               ::= <SimpleExpression> [ <RelOp> <SimpleExpression> ]*;

<SimpleExpression>         ::= <Term> [ <AddOp> <Term> ]*;

<Term>                     ::= <Factor> [ <MulOp> <Factor> ]*;

<Factor>                   ::= <Designator> [ '(' [<ExprList>] ')' ] |
                               <Number>                              |
                               '(' <Expression> ')'                  |
                               'NOT' <Factor>                        |
                               [ '+' | '-' ] <Factor>;

<RelOp>                    ::= '>' | '<' | '<=' | '>=' | '<>' | '=';

<AddOp>                    ::= '+' | '-' | 'OR' | 'XOR';

<MulOp>                    ::= '*' | '/' | 'DIV' | 'MOD' | 'AND' | 'SHL' | 'SHR';

<Designator>               ::= <Ident> [ '.' <Ident> ]* [ '[' <ExprList> ']' ]*;

<ExprList>                 ::= <Expression> ( ',' <Expression> )*;

<Statement>                ::= [ <SimpleStatement> | <StructStmt> ];

<StmtList>                 ::= <Statement> ( ';' <Statement> )*;

<SimpleStatement>          ::= <Designator> [ '(' [<ExprList>] ')' ]                         |
                               <Designator> (':=' | '+=' | '-=' | '*=' | '/=') <Expression>' |
                               <ReadStatement>                                               | 
                               <WriteStatement>                                              |
                               'BREAK'                                                       |
                               'CONTINUE';

<ReadStatement>            ::= 'READ' [ '(' <IdentList> ')' ];

<IdentList>                ::= <Ident> ( ',' <Ident> )*;

<WriteStatement>           ::= 'WRITE' [ '(' <ExprList> | <String> ')' ];

<StructStmt>               ::= <CompoundStmt>    |
                               <IfStmt>          |
                               <RepeatStmt>      | 
                               <WhileStmt>       | 
                               <ForStmt>;

<CompoundStmt>             ::= 'BEGIN' <StmtList> 'END';

<IfStmt>                   ::= 'IF' <Expression> 'THEN' <Statement> [ 'ELSE' <Statement> ];

<RepeatStmt>               ::= 'REPEAT' <StmtList> 'UNTIL' <Expression>;

<WhileStmt>                ::= 'WHILE' <Expression> 'DO' <Statement>;

<ForStmt>                  ::= 'FOR' <Ident> ':=' <Expression> 'TO' <Expression> 'DO' <Statement>;

<ProcedureDecl>            ::= <ProcedureHeading> ';' <Block> ';';

<FunctionDecl>             ::= <FunctionHeading> ';' <Block> ';';

<FunctionHeading>          ::= 'FUNCTION' <Ident> [ <FormalParameters> ] ':' <Type>;

<ProcedureHeading>         ::= 'PROCEDURE' <Ident> [ <FormalParameters> ];

<FormalParameters>         ::= '(' [ <FormalParam> (';' <FormalParam> )* ] ')';

<FormalParam>              ::= <Parameter> | <VarParameter> | <ConstParameter>;

<Parameter>                ::= <IdentList> ':' ( [ 'ARRAY' 'OF' ] <TypeID> ) |
                               <Ident> ':' <TypeID> '=' <ConstExpr>;

<VarParameter>             ::= 'VAR' <IdentList> [ ':' ( [ 'ARRAY' 'OF' ] <TypeID> ) ];

<ConstParameter>           ::= 'CONST' <Parameter>;

<IdentList>                ::= <Ident> ( ',' <Ident> )*;

<TypeID>                   ::= <Ident>;

<Ident>                    ::= ['&'] <AlphaChar> ( <AlphaChar> | <NumericChar> )*;

<ConstExpr>                ::= ? An <Expression> which evaluates to a constant at compilation time ?;

<Number>                   ::= <IntNumber> | <RealNumber>;

<RealNumber>               ::= <NumericChar>+ [ "." <NumericChar>+ ] [ "E" [ '+' | '-' ] <NumericChar>+ ];

<IntNumber>                ::= (<NumericChar>+) |
                               ( '$' <HexNumChar>+ ) |
                               ( '&' <OctalNumChar>+ ) |
                               ( '%' <BinNumChar>+ )

<CharConst>                ::= ( "'" <Character> "'" ) | ( '#' <IntNumber>);

<String>                   ::= (( "'" <Character>+ "'" ) | ( '#' <IntNumber>))+;

<Character>                ::= #32..#127;

<AlphaChar>                ::= 'A'..'Z';

<NumericChar>              ::= '0'..'9';

<HexNumChar>               ::= <NumericChar> | ('A'..'F');

<OctalNumChar>             ::= '0'..'7';

<BinNumChar>               ::= '0' | '1';
