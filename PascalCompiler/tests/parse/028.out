program factorial
  integer: (integer = (built-in));
  real: (real = (built-in));
  char: (char = (built-in));
  factorial: factorial;
  n: n : (integer = (built-in)) ;
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  procedure readln(n : (integer = (built-in))  modifier: Var)
      n: n : (integer = (built-in))  modifier: Var;
  └─Assignment statement
    ├─Designator
    │ └─n
    └─30
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  function fac(n : (integer = (built-in))  modifier: Value), return type : (integer = (built-in))
      n: n : (integer = (built-in))  modifier: Value;
      res: res : (integer = (built-in)) ;
  └─If
    ├─Equal
    │ ├─Designator
    │ │ └─n
    │ └─0
    ├─Assignment statement
    │ ├─Designator
    │ │ └─res
    │ └─1
    └─Assignment statement
      ├─Designator
      │ └─res
      └─Asterisk
        ├─Designator
        │ └─n
        └─Call in expression
          ├─Designator
          │ └─fac
          └─Expression list
            └─Minus
              ├─Designator
              │ └─n
              └─1
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
├─Call in statement
│ ├─Designator
│ │ └─readln
│ └─Expression list
│   └─Designator
│     └─n
├─If
│ ├─Less
│ │ ├─Designator
│ │ │ └─n
│ │ └─0
│ ├─Assignment statement
│ │ ├─Designator
│ │ │ └─n
│ │ └─Minus
│ │   └─Designator
│ │     └─n
│ └─compound statement
│   └─Assignment statement
│     ├─Designator
│     │ └─n
│     └─Plus
│       ├─Designator
│       │ └─n
│       └─1
└─Call in statement
  ├─Designator
  │ └─fac
  └─Expression list
    └─Designator
      └─n
